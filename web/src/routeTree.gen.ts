/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as GuideImport } from './routes/guide'
import { Route as IndexImport } from './routes/index'
import { Route as LibraryIndexImport } from './routes/library/index'
import { Route as ChannelsIndexImport } from './routes/channels/index'
import { Route as SettingsXmltvImport } from './routes/settings/xmltv'
import { Route as SettingsTasksImport } from './routes/settings/tasks'
import { Route as SettingsPlexImport } from './routes/settings/plex'
import { Route as SettingsHdhrImport } from './routes/settings/hdhr'
import { Route as SettingsGeneralImport } from './routes/settings/general'
import { Route as SettingsFfmpegImport } from './routes/settings/ffmpeg'
import { Route as LibraryCustomShowsImport } from './routes/library/custom-shows'
import { Route as ChannelsTestImport } from './routes/channels/test'
import { Route as ChannelsNewImport } from './routes/channels/new'
import { Route as ChannelsChannelIdImport } from './routes/channels/$channelId'
import { Route as LibraryIdEditImport } from './routes/library_/$id/edit'
import { Route as LibraryCustomShowsNewImport } from './routes/library/custom-shows.new'
import { Route as ChannelsChannelIdProgrammingImport } from './routes/channels_/$channelId/programming'
import { Route as ChannelsChannelIdEditIndexImport } from './routes/channels_/$channelId/edit/index'
import { Route as ChannelsChannelIdEditFlexImport } from './routes/channels_/$channelId/edit/flex'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const GuideRoute = GuideImport.update({
  path: '/guide',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LibraryIndexRoute = LibraryIndexImport.update({
  path: '/library/',
  getParentRoute: () => rootRoute,
} as any)

const ChannelsIndexRoute = ChannelsIndexImport.update({
  path: '/channels/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsXmltvRoute = SettingsXmltvImport.update({
  path: '/xmltv',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsTasksRoute = SettingsTasksImport.update({
  path: '/tasks',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsPlexRoute = SettingsPlexImport.update({
  path: '/plex',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsHdhrRoute = SettingsHdhrImport.update({
  path: '/hdhr',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsGeneralRoute = SettingsGeneralImport.update({
  path: '/general',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsFfmpegRoute = SettingsFfmpegImport.update({
  path: '/ffmpeg',
  getParentRoute: () => SettingsRoute,
} as any)

const LibraryCustomShowsRoute = LibraryCustomShowsImport.update({
  path: '/library/custom-shows',
  getParentRoute: () => rootRoute,
} as any)

const ChannelsTestRoute = ChannelsTestImport.update({
  path: '/channels/test',
  getParentRoute: () => rootRoute,
} as any)

const ChannelsNewRoute = ChannelsNewImport.update({
  path: '/channels/new',
  getParentRoute: () => rootRoute,
} as any)

const ChannelsChannelIdRoute = ChannelsChannelIdImport.update({
  path: '/channels/$channelId',
  getParentRoute: () => rootRoute,
} as any)

const LibraryIdEditRoute = LibraryIdEditImport.update({
  path: '/library/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

const LibraryCustomShowsNewRoute = LibraryCustomShowsNewImport.update({
  path: '/new',
  getParentRoute: () => LibraryCustomShowsRoute,
} as any)

const ChannelsChannelIdProgrammingRoute =
  ChannelsChannelIdProgrammingImport.update({
    path: '/channels/$channelId/programming',
    getParentRoute: () => rootRoute,
  } as any)

const ChannelsChannelIdEditIndexRoute = ChannelsChannelIdEditIndexImport.update(
  {
    path: '/channels/$channelId/edit/',
    getParentRoute: () => rootRoute,
  } as any,
)

const ChannelsChannelIdEditFlexRoute = ChannelsChannelIdEditFlexImport.update({
  path: '/channels/$channelId/edit/flex',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/guide': {
      id: '/guide'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof GuideImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/channels/$channelId': {
      id: '/channels/$channelId'
      path: '/channels/$channelId'
      fullPath: '/channels/$channelId'
      preLoaderRoute: typeof ChannelsChannelIdImport
      parentRoute: typeof rootRoute
    }
    '/channels/new': {
      id: '/channels/new'
      path: '/channels/new'
      fullPath: '/channels/new'
      preLoaderRoute: typeof ChannelsNewImport
      parentRoute: typeof rootRoute
    }
    '/channels/test': {
      id: '/channels/test'
      path: '/channels/test'
      fullPath: '/channels/test'
      preLoaderRoute: typeof ChannelsTestImport
      parentRoute: typeof rootRoute
    }
    '/library/custom-shows': {
      id: '/library/custom-shows'
      path: '/library/custom-shows'
      fullPath: '/library/custom-shows'
      preLoaderRoute: typeof LibraryCustomShowsImport
      parentRoute: typeof rootRoute
    }
    '/settings/ffmpeg': {
      id: '/settings/ffmpeg'
      path: '/ffmpeg'
      fullPath: '/settings/ffmpeg'
      preLoaderRoute: typeof SettingsFfmpegImport
      parentRoute: typeof SettingsImport
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralImport
      parentRoute: typeof SettingsImport
    }
    '/settings/hdhr': {
      id: '/settings/hdhr'
      path: '/hdhr'
      fullPath: '/settings/hdhr'
      preLoaderRoute: typeof SettingsHdhrImport
      parentRoute: typeof SettingsImport
    }
    '/settings/plex': {
      id: '/settings/plex'
      path: '/plex'
      fullPath: '/settings/plex'
      preLoaderRoute: typeof SettingsPlexImport
      parentRoute: typeof SettingsImport
    }
    '/settings/tasks': {
      id: '/settings/tasks'
      path: '/tasks'
      fullPath: '/settings/tasks'
      preLoaderRoute: typeof SettingsTasksImport
      parentRoute: typeof SettingsImport
    }
    '/settings/xmltv': {
      id: '/settings/xmltv'
      path: '/xmltv'
      fullPath: '/settings/xmltv'
      preLoaderRoute: typeof SettingsXmltvImport
      parentRoute: typeof SettingsImport
    }
    '/channels/': {
      id: '/channels/'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsIndexImport
      parentRoute: typeof rootRoute
    }
    '/library/': {
      id: '/library/'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryIndexImport
      parentRoute: typeof rootRoute
    }
    '/channels/$channelId/programming': {
      id: '/channels/$channelId/programming'
      path: '/channels/$channelId/programming'
      fullPath: '/channels/$channelId/programming'
      preLoaderRoute: typeof ChannelsChannelIdProgrammingImport
      parentRoute: typeof rootRoute
    }
    '/library/custom-shows/new': {
      id: '/library/custom-shows/new'
      path: '/new'
      fullPath: '/library/custom-shows/new'
      preLoaderRoute: typeof LibraryCustomShowsNewImport
      parentRoute: typeof LibraryCustomShowsImport
    }
    '/library/$id/edit': {
      id: '/library/$id/edit'
      path: '/library/$id/edit'
      fullPath: '/library/$id/edit'
      preLoaderRoute: typeof LibraryIdEditImport
      parentRoute: typeof rootRoute
    }
    '/channels/$channelId/edit/flex': {
      id: '/channels/$channelId/edit/flex'
      path: '/channels/$channelId/edit/flex'
      fullPath: '/channels/$channelId/edit/flex'
      preLoaderRoute: typeof ChannelsChannelIdEditFlexImport
      parentRoute: typeof rootRoute
    }
    '/channels/$channelId/edit/': {
      id: '/channels/$channelId/edit/'
      path: '/channels/$channelId/edit'
      fullPath: '/channels/$channelId/edit'
      preLoaderRoute: typeof ChannelsChannelIdEditIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  GuideRoute,
  SettingsRoute: SettingsRoute.addChildren({
    SettingsFfmpegRoute,
    SettingsGeneralRoute,
    SettingsHdhrRoute,
    SettingsPlexRoute,
    SettingsTasksRoute,
    SettingsXmltvRoute,
  }),
  ChannelsChannelIdRoute,
  ChannelsNewRoute,
  ChannelsTestRoute,
  LibraryCustomShowsRoute: LibraryCustomShowsRoute.addChildren({
    LibraryCustomShowsNewRoute,
  }),
  ChannelsIndexRoute,
  LibraryIndexRoute,
  ChannelsChannelIdProgrammingRoute,
  LibraryIdEditRoute,
  ChannelsChannelIdEditFlexRoute,
  ChannelsChannelIdEditIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/guide",
        "/settings",
        "/channels/$channelId",
        "/channels/new",
        "/channels/test",
        "/library/custom-shows",
        "/channels/",
        "/library/",
        "/channels/$channelId/programming",
        "/library/$id/edit",
        "/channels/$channelId/edit/flex",
        "/channels/$channelId/edit/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/guide": {
      "filePath": "guide.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/ffmpeg",
        "/settings/general",
        "/settings/hdhr",
        "/settings/plex",
        "/settings/tasks",
        "/settings/xmltv"
      ]
    },
    "/channels/$channelId": {
      "filePath": "channels/$channelId.tsx"
    },
    "/channels/new": {
      "filePath": "channels/new.tsx"
    },
    "/channels/test": {
      "filePath": "channels/test.tsx"
    },
    "/library/custom-shows": {
      "filePath": "library/custom-shows.tsx",
      "children": [
        "/library/custom-shows/new"
      ]
    },
    "/settings/ffmpeg": {
      "filePath": "settings/ffmpeg.tsx",
      "parent": "/settings"
    },
    "/settings/general": {
      "filePath": "settings/general.tsx",
      "parent": "/settings"
    },
    "/settings/hdhr": {
      "filePath": "settings/hdhr.tsx",
      "parent": "/settings"
    },
    "/settings/plex": {
      "filePath": "settings/plex.tsx",
      "parent": "/settings"
    },
    "/settings/tasks": {
      "filePath": "settings/tasks.tsx",
      "parent": "/settings"
    },
    "/settings/xmltv": {
      "filePath": "settings/xmltv.tsx",
      "parent": "/settings"
    },
    "/channels/": {
      "filePath": "channels/index.tsx"
    },
    "/library/": {
      "filePath": "library/index.tsx"
    },
    "/channels/$channelId/programming": {
      "filePath": "channels_/$channelId/programming.tsx"
    },
    "/library/custom-shows/new": {
      "filePath": "library/custom-shows.new.tsx",
      "parent": "/library/custom-shows"
    },
    "/library/$id/edit": {
      "filePath": "library_/$id/edit.tsx"
    },
    "/channels/$channelId/edit/flex": {
      "filePath": "channels_/$channelId/edit/flex.tsx"
    },
    "/channels/$channelId/edit/": {
      "filePath": "channels_/$channelId/edit/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

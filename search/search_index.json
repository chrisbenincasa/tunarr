{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tunarr","text":"<p>Create live TV channels from media on your Plex/Jellyfin servers, and more!</p> <p>Configure your channels, programs, commercials, and settings using the Tunarr web UI.</p> <p>Watch your channels by adding the spoofed Tunarr HDHomerun tuner to Plex, Jellyfin, or Emby. Or utilize generated M3U files with any 3rd party IPTV player app.</p>"},{"location":"#what-is-this","title":"What is this?","text":"<p>Tunarr was originally a fork of dizqueTV (which in itself was a fork of other projects!) which evolved into a near-complete rewrite. This project was born out of both a love for TV and an appreciation for the work put into dizqueTV and its predecessors.</p> <p>Tunarr has the following goals:</p> <ul> <li>Modernize the stack, both backend and frontend</li> <li>Provide an migration path for existing users</li> <li>Stabilize the program, fix bugs, and improve performance (Tunarr currently is developed and tested on Node 20.11.1, which offers non-trivial performance improvements over previous versions)</li> <li>Modernize and \"prettify\" the Web UI</li> <li>And of course, Add a ton great new features!</li> </ul>"},{"location":"configure/programming/","title":"Programming","text":"<p>After creating a new channel, you will be presented with a blank Programming page.</p> <p>Select \"ADD MEDIA\".</p> <p></p> <p>Select the library you'd like to pull media from.</p> <p></p> <p>Add all of the shows you'd like this channel to include. </p> <p>If you'd like to add all episodes from a show, select \"ADD SERIES\".</p> <p>If you'd only like to include specific seasons, expand the show by selecting the carrot on the left and select \"ADD ALL\" on each season you'd like to include.</p> <p>If you'd like to add specific episodes but not the entire season, expand the season by selecting the carrot on the left and select \"ADD EPISODE\".</p> <p></p> <p>Expand the menu on the right to view a summary of your changes.</p> <p></p> <p>Select \"ADD ITEMS\" to save your changes. </p> <p></p> <p>By default, your episode ordering will be alphabetical (by show name) and in the proper season order. In this example, we have two shows and the first show will play in its entirety progressing from specials through all seasons, and only then will the next show start playing. </p> <p></p> <p>If we instead wanted this similar to what we'd see on traditional television, select \"SORT\" and choose either Block Shuffle or Cyclic Shuffle. </p> <p></p> <p>Block Shuffle will play a specific number of episodes from a show, proceed to the next show, play that same number of episodes, proceed to the next show, etc. </p> <p>By default, when a show completes airing, it will be absent from your schedule until all of the remaining shows complete airing, where the schedule will then be repeated. This means that as you reach the end of your schedule, it may be dominated by one or two shows that have a longer runtime or more episodes than others.</p> <p>To get around this, select \"Make perfect schedule loop\". This will attempt to have all shows complete airing at the same time.</p> <p></p> <p>Please note the perfect schedule loop option does not currently support larger channels. If you see the below error, your channel has too many episodes to use this feature. In this case, the \"Loop Short Programs\" option can be used.</p> <p></p> <p>Cyclic Shuffle will alternate between shows while attempting to preserve the episode sequence. So in this example, it will play S00E01 from show 1, then play S00E01-E02 from show 2, then S01E01-E02 from show 1, then S01E01 from show 2, etc. Compared to Block Schedule, Cyclic Shuffle is randomized, so it will not always display the same number of episodes from a show. Cyclic Shuffle also does not support any features to create even blocks, so the end of your schedule will likely be dominated by a few shows with larger episode counts and runtime. </p> <p>Once you have a channel created with programming, you are ready to setup your Client and start using Tunarr!</p>"},{"location":"configure/transcoding/","title":"Transcoding","text":""},{"location":"configure/channels/","title":"Channels","text":"<p>This page will display a brief overview of your channels. </p> <p>Click the \"NEW\" button to be brought to the New Channel Properties page.</p> <p></p> <p>Once you have created your first channel, head over to Programming to start adding episodes. </p>"},{"location":"configure/channels/epg/","title":"EPG","text":"<p>TBD</p>"},{"location":"configure/channels/flex/","title":"Flex","text":"<p>Flex is an optional block of time that is used to separate two episodes of television. One reason to use Flex time is to create commercial breaks after each episode to simulate traditional television.</p> <p>There are a few ways to create Flex time such as Time Slots. When you have Flex time but no Filler Content configured, the Channel Fallback shown in the screenshot below will be used. You can optionally select the upload button to choose your own custom fallback image. </p> <p>Please see the Filler Lists page for details on creating your first list. </p> <p></p> <p>Once you have a Filler list created, you can select the list you'd like to use on a particular channel.</p> <p></p> <p>Once you have a Filler list added to a channel, it will only be used when there is Flex time scheduled, such as when using Time Slots with the Pad Times feature. </p>"},{"location":"configure/channels/properties/","title":"Properties","text":"<p>Choose a channel a name. Optionally, you can also add a thumbnail by uploading an image. This will be the logo visible within your Plex/Jellyfin channel guide. Transparent .png files are supported. </p> <p>On-Demand will allow your channels to behave similar to streaming services, where the watch states will only progress while you're actively viewing the channel. This is disabled by default, which means by default channels will behave similar to traditional televison where watch states will progress without you actively viewing the channel.</p> <p></p> <p>Click the \"FLEX\" tab if you'd like to configure optional filler content to play in-between episodes. </p>"},{"location":"configure/channels/transcoding/","title":"Channel Trancoding Settings","text":""},{"location":"configure/channels/transcoding/#stream-mode","title":"Stream Mode","text":"<p>Tunarr supports several different stream modes that can be set at the channel level.</p> <p>Info</p> <p>No matter which stream mode you choose for a channel, clients which require an MPEG-TS stream will still work.</p>"},{"location":"configure/channels/transcoding/#hls-recommended","title":"HLS (recommended)","text":"<p>HLS is the default streaming mode for a channel. In our testing, it is generally the most reliable and efficient. It is akin to ErsatzTV's \"HLS Segmenter\" mode.</p>"},{"location":"configure/channels/transcoding/#how-does-it-work","title":"How does it work?","text":"<p>This mode creates a single FFMPEG process, per-program. The process applies all transcoding configuration necessary. Tunarr manages interleaving these processes to create seamless m3u8 playlists for playback.</p>"},{"location":"configure/channels/transcoding/#things-to-consider","title":"Things to consider","text":"<p>In our testing, we've found this mode to be both efficient and reliable. That said, it is also the newest mode introduced to Tunarr, so there might be some kinks to work out.</p>"},{"location":"configure/channels/transcoding/#hls-alt","title":"HLS alt","text":"<p>HLS alt (name pending!) is another HLS streaming mode, which operates a little differently. This mode is akin to ErsatzTV's \"HLS Segmenter V2\" mode.</p>"},{"location":"configure/channels/transcoding/#how-does-it-work_1","title":"How does it work?","text":"<p>This mode creates two FFMPEG processes. The first runs per-program and applies scaling/cropping, watermarks, frame rate changes, etc, but outputs a rawvideo stream. The second process concatenates all of these together while also applying bit rate limits and codec changes.</p>"},{"location":"configure/channels/transcoding/#things-to-consider_1","title":"Things to consider","text":"<p>The downside to this mode is that the one of the steps (the per-program process) requires software encoding. This can put a lot of stress on certain systems. The stream setup can also lead to quality loss, due to generation loss. However, it does have the potential to create a more reliable / robust stream.</p>"},{"location":"configure/channels/transcoding/#mpeg-ts","title":"MPEG-TS","text":"<p>This mode is the closest to the DizqueTV experience.</p>"},{"location":"configure/channels/transcoding/#how-does-it-work_2","title":"How does it work?","text":"<p>It consists of two FFMPEG processes, one which performs the per-program transcode, outputting an mpeg-ts stream and one which concatenates this raw stream together and outputs it.</p>"},{"location":"configure/channels/transcoding/#things-to-consider_2","title":"Things to consider","text":"<p>If this mode was \"good enough\" we probably wouldn't have spent time implementing the other modes! There are a lot of potential issues with this mode; too many to list here.</p>"},{"location":"configure/channels/transcoding/#watermarks","title":"Watermarks","text":"<p>Channels can have watermarks to aid in recreating a classic TV experience.</p> <p></p> <p>There are many ways to customize watermarks for a channel. Here are some details on specific options:</p>"},{"location":"configure/channels/transcoding/#watermark-period","title":"Watermark Period","text":"<p>This value can be used to fade a channel's watermark in/out every N minutes.</p>"},{"location":"configure/channels/transcoding/#watermark-on-leading-edge","title":"Watermark on leading edge","text":"<p>When using intermittent watermarks, use this option to control whether the watermark begins in a visible (true) or hidden (false) state.</p>"},{"location":"configure/channels/transcoding/#total-watermark-duration","title":"Total watermark duration","text":"<p>This option controls the absolute duration the watermark can be displayed for a given program segment of a channel. Its value takes precedence over the 'watermark period' but does not disable it. For instance, you could configure a watermark period of 5 minutes with total duration of 45 mins. On a show that is one hour, the watermark will fade in/out for the first 45 minutes and then be hidden for the final 15 minutes.</p>"},{"location":"configure/channels/transcoding/#overrides","title":"Overrides","text":"<p>Global settings, such as target resolution, bit rate, and buffer size can be overridden per-channel.</p>"},{"location":"configure/clients/","title":"Clients","text":"<p>Once you have your channels created within Tunarr, you are ready to configure your clients. We currently have a guide written for Plex, but Jellyfin and Emby should work as well. You can also utilize generated M3U files with any 3rd party IPTV player app.</p>"},{"location":"configure/clients/jellyfin/","title":"Jellyfin","text":"<p>TBD</p>"},{"location":"configure/clients/plex/","title":"Plex","text":"<p>Once you have your channels created with programming/shows added, head over to Plex &gt; Settings icon &gt; Manage &gt; Live TV &amp; DVR &gt; Set Up Plex Tuner.</p> <p></p> <p></p> <p></p> <p>Plex should already detect Tunarr and you should see your servers IP address. If you do not, select \"Don't see your HDHomeRun device? Enter its network address manually\". Use the following format replacing serverIP with your servers IP address: e.g. <code>http://serverIP:8000</code></p> <p>Once your server is shown, select \"Have an XMLTV guide on your server? Click here to use it.\"</p> <p></p> <p>In the \"XMLTV GUIDE\" field, use the following template replacing serverIP with your Tunarr servers IP address: e.g. <code>http://serverIP:8000/api/xmltv.xml</code></p> <p>Select \"Continue\"</p> <p></p> <p>Your channels should automatically be mapped. Select \"Continue\".</p> <p></p> <p>Plex should now display your Tunarr channels in the Live TV section. Select \"View Guide\" to be brought directly there.</p> <p></p> <p>Play your channel by hovering over the channel icon and selecting the play icon.</p> <p></p> <p>Warning</p> <p>Please note, at the time of writing the Plex Windows client is not currently supported and will yield a \"This Live TV session has ended\" error. Windows users should use the web browser client located at http://serverIP:32400/web until this is resolved. This issue is tracked in chrisbenincasa/tunarr#718</p>"},{"location":"configure/library/","title":"Library","text":"<p>Filler lists are collections of videos that you may want to play during Flex time segments. Flex is time within a channel that does not have a program scheduled (usually used for padding).</p> <p>Custom Shows are sequences of videos that represent a episodes of a virtual TV show. When you add these shows to a channel, the schedule tools will treat the videos as if they belonged to a single TV show.</p>"},{"location":"configure/library/custom-shows/","title":"Custom Shows","text":"<p>Placeholder</p>"},{"location":"configure/library/filler/","title":"Filler","text":"<p>Filler lists are collections of content that are used by Flex to pad time between episodes. One reason to use Filler is to simulate traditional television by playing advertisements between episode airings. </p> <p>There are many places to source filler videos from. DizqueTV's Wiki has plenty of filler repositories listed. Many of these are YouTube playlists, so you can use tools like MeTube to rip the playlist, and then add a new library to Plex with these filler videos, which can then be used by Tunarr's Filler lists. </p> <p>To get started, from the side panel select \"Library\", \"EDIT FILLERS\", then \"NEW\".</p> <p></p> <p></p> <p></p> <p>Add a name for your filler list, then select \"ADD MEDIA\". </p> <p></p> <p>Select the library with your Filler content, then select \"ADD MOVIE\" for each item you'd like to include. </p> <p></p> <p>Expand the menu on the right to view a summary of your changes, then select \"ADD ITEMS\" followed by \"SAVE\". </p> <p></p> <p></p> <p></p> <p>To use a filler list with your channels, edit your channel and select the Flex tab. </p>"},{"location":"configure/scheduling-tools/","title":"Scheduling Tools","text":"<p>Tunarr offers a range of tools for scheduling your content.</p> <p>Time Slots are the best option to most closely mimic traditional television but can be a bit laborious to configure. </p> <p>Random Slots accomplishes the same as Time Slots, but requires much less work to setup due to randomizing when each show is aired. </p> <p>Balance let's you pick the weight for your shows to air some shows more frequently than others. </p> <p>Replicate will create copies of the same schedule and play them in sequence. This typically is not needed as Tunarr already handles replaying a schedule once complete. </p> <p>Consolidate merges contiguous match flex and redirect blocks into singular spans. </p>"},{"location":"configure/scheduling-tools/balance/","title":"Balance","text":"<p>TBD</p>"},{"location":"configure/scheduling-tools/consolidate/","title":"Consolidate","text":"<p>TBD</p>"},{"location":"configure/scheduling-tools/random-slots/","title":"Random Slots","text":"<p>Random Slots allow you to schedule specific shows to run during randomized time slots. </p> <p>To schedule Random Slots for your channel programming, select \"TOOLS\", then \"Random Slots\".</p> <p></p> <p>In this example, we want both \"Yu-Gi-Oh! Duel Monsters\" and \"Batman Beyond\" to air in 30 minute blocks. We have Pad Times set to 00:00 and 00:30, so the episodes will always try to air right at those times by using Flex to fill the empty time. </p> <p></p> <p>See below for an example of our current schedule. Note that due to the schedule starting at 4:43pm, the first episode will finish airing at 5:05pm, so a larger-than-normal amount of Flex time will be used to get the schedule back on track to have things air at 00:00 and 00:30. After the first airing, we see things normalized with a more appropriate 8-10 minutes of Flex after each episode. </p> <p></p> <p>In this example, one of our shows has far more episodes than the other but by default the episode Distribution is Uniform so the shows will be ordered with equal priority. If we instead wanted \"Yu-Gi-Oh! Duel Monsters\" to air 70% of the time, and \"Batman Beyond\" to air 30% of the time, we would set Distribution to Weighted and adjust the sliders. </p> <p></p> <p>See below for an example of our schedule now that \"Yu-Gi-Oh! Duel Monsters\" is Weighted to air 70% of the time. </p> <p></p>"},{"location":"configure/scheduling-tools/replicate/","title":"Replicate","text":"<p>TBD</p>"},{"location":"configure/scheduling-tools/time-slots/","title":"Time Slots","text":"<p>Time Slots allow you to schedule specific shows to run at specific time slots each day or week. </p> <p>To schedule Time Slots for your channel programming, select \"TOOLS\", then \"Time Slots\".</p> <p></p> <p>In this example, we want \"Yu-Gi-Oh! Duel Monsters\" to always air at 10am each day, followed by \"Batman Beyond\" at 10:30am each day. We also want Flex to fill the time in-between episodes using the Pad Times option, so that episodes always air right at 10am and 10:30am. We have allowed 5 minutes of lateness, so if an episode runs over the 30 minute time slot by 5 minutes or less, the next shows episode will still play no later than 10:35am.</p> <p></p> <p>See below for an example of our current schedule. Please note that as we have only selected two time slots for the entire day, \"Batman Beyond\" being our last scheduled show will continue airing until the following day at 10am when the next scheduled episode of \"Yu-Gi-Oh! Duel Monsters\" is set to air.</p> <p></p> <p>If we instead wanted to air these two episodes, then have the channel play Flex content until the next episode of \"Yu-Gi-Oh! Duel Monsters\" the following day at 10am, we would simply add Flex after \"Batman Beyond\".</p> <p></p> <p>See below for an example of our schedule now that we have Flex after our two episodes air. Now it will alternate Show 1 Day 1, Show 2 Day 1, Show 1 Day 2, Show 2 Day 2, etc. </p> <p></p>"},{"location":"configure/system/","title":"System","text":""},{"location":"configure/system/ffmpeg/","title":"FFmpeg","text":"<p>Many settings about how Tunarr transcode content can be configured on the FFmpeg page</p>"},{"location":"configure/system/ffmpeg/#executable-paths","title":"Executable Paths","text":"<p>Configure FFmpeg and FFprobe executable paths. Generally, both executables reside in the same directory.</p> <p>Warning</p> <p>On 2024/10/01, an exploit affecting dizqueTV was reported. This mainly affects instances of dizqueTV that were exposed to the public internet. The exploit affected Tunarr as well, and was patched in 0.14.0. This exploit is the reason \"admin mode\" exists.</p> <p>Additionally, we consider exposing Tunarr publicly to be an unsupported use-case. While we take security extremely seriously, this path is not one we currently test against. We would not recommend exposing Tunarr to the public via port forwarding at this point.</p> <p>This setting can only be configured in \"admin mode\" due to its sensitivity (Tunarr attempts to run the inputted executable path!).</p>"},{"location":"configure/system/security/","title":"Security","text":""},{"location":"configure/system/security/#admin-mode","title":"Admin mode","text":"<p>Due to this exploit Tunarr supports \"admin mode\". By default, admin mode is disabled. Some settings, like FFmpeg executable paths, can only be edited in the Tunarr UI when Tunarr is running in admin mode</p> <p>There are several ways to update sensitive settings that require admin mode.</p>"},{"location":"configure/system/security/#running-in-admin-mode","title":"Running in admin mode","text":""},{"location":"configure/system/security/#standalone-script","title":"Standalone script","text":"<p>Pass the <code>--admin</code> flag when running the script, e.g.:</p> <pre><code> ./tunarr.sh --admin\n</code></pre> <p>or use an environment variable:</p> <pre><code>TUNARR_SERVER_ADMIN_MODE=true ./tunarr.sh\n</code></pre>"},{"location":"configure/system/security/#docker","title":"Docker","text":"<p>Start Tunarr server with the <code>admin</code> argument</p> <pre><code>docker run ... chrisbenincasa/tunarr:latest -- /tunarr/bundle.js --admin\n</code></pre> <p>Note</p> <p>chrisbenincasa/tunarr#900 tracks simplifying running commands against Tunarr within a container.</p> <p>or with the environment variable</p> <pre><code>docker run -e 'TUNARR_SERVER_ADMIN_MODE=true' ... chrisbenincasa/tunarr\n</code></pre>"},{"location":"configure/system/security/#updating-sensitive-values-directly","title":"Updating sensitive values directly","text":"<p>Tunarr supports other run modes other than server. One is updating settings.json values directly. This can be done against a running Tunarr server without admin mode enabled.</p> <pre><code>./tunarr.sh settings update --settings.ffmpeg.ffmpegExecutablePath=\"FFMEPG_PATH\" --settings.ffmpeg.ffprobeExecutablePath=\"FFPROBE_PATH\"\n</code></pre> <p>This also works with Docker</p> <pre><code>docker run --rm \\\n  ...\n  chrisbenincasa/tunarr -- /tunarr/bundle.js \\\n  settings update \\\n  settings.ffmpeg.ffmpegExecutablePath=\"FFMEPG_PATH\" \\\n  settings.ffmpeg.ffprobeExecutablePath=\"FFPROBE_PATH\"\n</code></pre>"},{"location":"dev/contributing/","title":"Contributing","text":""},{"location":"getting-started/installation/","title":"Installation","text":"<p>Tunarr is available in two flavors: Docker image and standalone binaries.</p>"},{"location":"getting-started/installation/#docker","title":"Docker","text":"<p>Tunarr is available on Docker Hub as well as GHCR. Docker images come pre-packaged with <code>ffmpeg</code> 7.0 (thanks @jasongdove from ErsatzTV!).</p> <p>The general format of tags is: <code>{release}{-encoder}?</code>.</p> <p>Since Tunarr is currently pre-release. There are a few tags to choose from which have different releae cadences:</p> <ul> <li><code>x.x.x</code> (versioned): These are release cuts. Because we are pre-1.0.0, breaking changes cause major version bumps and bug fixes are patch version bumps. Once we achieve 1.0.0, we will use proper semver.</li> <li><code>latest</code>: The latest tag points at the most recent release version.</li> <li><code>edge</code>: Pushed every 2 hours off of the \"dev\" branch. This build can be very unstable.</li> </ul> <p>Each tag can also use specialized image builds which include support for hardware-accelerated encoding with Nvidia, QSV, and VAAPI.</p> <p>Info</p> <p>Tunarr has experimental support for QSV / VAAPI. This issue is tracked here: chrisbenincasa/tunarr#23</p> <p>Image tags are in the form <code>TAG(-HWACCEL)?</code>. For example, with the <code>latest</code> tag:</p> <p>Docker:</p> <ul> <li><code>chrisbenincasa/tunarr:latest</code></li> <li><code>chrisbenincasa/tunarr:latest-nvidia</code></li> <li><code>chrisbenincasa/tunarr:latest-vaapi</code></li> </ul> <p>GHCR:</p> <ul> <li><code>ghcr.io/chrisbenincasa/tunarr:latest</code></li> <li><code>ghcr.io/chrisbenincasa/tunarr:latest-nvidia</code></li> <li><code>ghcr.io/chrisbenincasa/tunarr:latest-vaapi</code></li> </ul> <p>Info</p> <p>We are still working on a proper build workflow for ARM images. See chrisbenincasa/tunarr#648 for details.</p>"},{"location":"getting-started/installation/#unraid","title":"Unraid","text":"<p>Tunarr is available in the Community Apps store on Unraid. After installing the Community Apps plugin on your Unraid machine, simply search for \"tunarr\" and select the resulting app (provided by grtgbln's repository).</p> <p>Follow the on-screen instructions to set up the container, including mapping the Web UI port. You can optionally pass in an Nvidia GPU or Intel iGPU for hardware transcoding (use the proper corresponding Docker tag; enable \"Advanced View\" for more details), and optionally map an existing dizqueTV configuration directory to migrate (click \"Show more settings...\").</p>"},{"location":"getting-started/installation/#binaries","title":"Binaries","text":"<p>Tunarr is released in pre-built binaries for Windows (x64), macOS (x64), and Linux (x64).</p> <p>Like Docker images, binaries are released with versions as well as a singular 'edge' build which is released bihourly.</p> <p>Prebuilt edge binaries can be found at https://github.com/chrisbenincasa/tunarr/releases/tag/edge</p> <p>Info</p> <p>Pre-built ARM binaries are tracked at chrisbenincasa/tunarr#363</p>"},{"location":"getting-started/run/","title":"Run","text":""},{"location":"getting-started/run/#docker","title":"Docker","text":"<pre><code>docker run \\\n    -v \"$(pwd)\"/tunarr:/config/tunarr \\\n    -v \"$(pwd)\"/.dizquetv:/.dizquetv \\\n    -p 8000:8000 \\\n    chrisbenincasa/tunarr\n</code></pre> <p>Or if using <code>docker compose</code>...</p> docker-compose.yml<pre><code>version: '3.8'\nservices:\n  tunarr:\n    image: chrisbenincasa/tunarr\n    # Uncomment along with runtime below to enable HW accel\n    # image: chrisbenincasa/tunarr:latest-nvidia\n    container_name: tunarr\n    ports:\n      - ${TUNARR_SERVER_PORT:-8000}:8000\n    # Uncomment if using the Nvidia container\n    # runtime: nvidia\n    environment:\n      - LOG_LEVEL=${TUNARR_LOG_LEVEL:-INFO}\n    # Uncomment if you'd like to adjust default config path\n    # - TUNARR_DATABASE_PATH=/your/path/tunarr\n    volumes:\n      # Choose a path on your host to map to /config/tunarr. This ensures\n      # that restarting the container will not delete your settings or DB.\n      - /path/to/tunarr/data:/config/tunarr\n    # The host path is relative to the location of the compose file\n    # This can also use an absolute path.\n    #\n    # Uncomment if migrating from dizquetv. Chnage the host path\n    # to the location of your dizquetv \"database\"\n    # - ./.dizquetv:/.dizquetv\n</code></pre>"},{"location":"getting-started/run/#docker-desktop","title":"Docker Desktop","text":"<p>If using Docker Desktop, before running the Tunarr container, you have to use the GUI to configure some of the options mentioned above. This can be done by clicking on the \"Optional settings\" button. This will show the UI below, where, at the very least, you should configure a volume bind mount (so that your configurations don't get deleted if the container restarts / Tunarr is upgraded). Set the \"Container path\" to <code>/config/tunarr</code> and the Host path to the path on your system where you want to save Tunarr data. Additionally, expose the port of your choice to access Tunarr, by setting \"Host port\" to the port of your choice.</p> <p></p>"},{"location":"getting-started/run/#migrating-from-dizquetv","title":"Migrating from dizqueTV","text":"<p>Tip</p> <p>We highly recommend that you use a copy of your <code>.dizquetv</code> database directory when starting out with Tunarr. While Tunarr does not alter or overwrite the <code>.dizquetv</code> database directory, it is still considered pre-release software and should be treated as such!</p> <p>Upon first launch, Tunarr will look for a <code>.dizquetv</code> folder relative to its working directory and attempt a migration. Tunarr will try and migrate all legacy dizqueTV settings, including channels, programs, Plex servers, etc.</p> <p>When using Docker, you can mount your a directory named <code>.dizquetv</code> when launching Tunarr to initiate the migration.</p> <p>Note</p> <p>You can force a legacy migration on subsequent launches of Tunarr using the <code>--force_migration</code> flag. But be careful! This can be destructive if you've done any additional configuration in Tunarr.</p>"},{"location":"getting-started/run/#hardware-encoding","title":"Hardware Encoding","text":""},{"location":"getting-started/run/#nvidia","title":"Nvidia","text":"<p>There are many ways to enable usage of an Nvidia GPU in a Docker container. The latest, and arguably simplest, method is to install and configure the Nvidia Container Toolkit.</p>"},{"location":"getting-started/run/#docker-cli-example-with-nvidia","title":"Docker CLI example with Nvidia","text":"<pre><code>docker run \\\n    --runtime nvidia\n    -v \"$(pwd)\"/tunarr:/config/tunarr \\\n    -p 8000:8000 \\\n    chrisbenincasa/tunarr\n</code></pre>"},{"location":"getting-started/run/#docker-compose-example-with-nvidia","title":"Docker Compose example with Nvidia","text":"docker-compose-nvidia.yml<pre><code>version: '3.8'\nservices:\n  tunarr:\n    image: chrisbenincasa/tunarr:latest-nvidia\n    container_name: tunarr\n    ports:\n      - ${TUNARR_SERVER_PORT:-8000}:8000\n    runtime: nvidia\n    environment:\n      - LOG_LEVEL=${TUNARR_LOG_LEVEL:-INFO}\n      - NVIDIA_VISIBLE_DEVICES=all\n    # Uncomment if you'd like to adjust default config path\n    # - TUNARR_DATABASE_PATH=/your/path/tunarr\n    volumes:\n      # Choose a path on your host to map to /config/tunarr. This ensures\n      # that restarting the container will not delete your settings or DB.\n      - /path/to/tunarr/data:/config/tunarr\n</code></pre>"},{"location":"getting-started/run/#qsv-intel-va-api-video-acceleration-api","title":"QSV (Intel) / VA-API (Video Acceleration API)","text":"<p>For QSV compatability in Docker, you must mount <code>/dev/dri</code> the container:</p>"},{"location":"getting-started/run/#docker-cli-example","title":"Docker CLI Example","text":"<pre><code>docker run \\\n -v \"$(pwd)\"/tunarr:/config/tunarr \\\n --device /dev/dri:/dev/dri\n-p 8000:8000 \\\n chrisbenincasa/tunarr:latest-vaapi\n</code></pre>"},{"location":"getting-started/run/#docker-compose-example","title":"Docker Compose Example","text":"docker-compose-vaapi.yml<pre><code>version: '3.8'\nservices:\n  tunarr:\n    image: chrisbenincasa/tunarr:latest-vaapi\n    container_name: tunarr\n    ports:\n      - ${TUNARR_SERVER_PORT:-8000}:8000\n    environment:\n      - LOG_LEVEL=${TUNARR_LOG_LEVEL:-INFO}\n    # Pass all render devices to container\n    devices:\n      - /dev/dri:/dev/dri\n    volumes:\n      # Choose a path on your host to map to /config/tunarr. This ensures\n      # that restarting the container will not delete your settings or DB.\n      - /path/to/tunarr/data:/config/tunarr\n</code></pre>"},{"location":"getting-started/setup/","title":"Setup","text":""},{"location":"getting-started/setup/#initial-setup","title":"Initial Setup","text":"<p>Upon first launching Tunarr, you will see the Welcome page with a few required setup steps.</p> <p></p>"},{"location":"getting-started/setup/#media-sources","title":"Media Sources","text":"<p>Currently, Tunarr supports Plex and Jellyfin as media sources. In order to add programming to your channels, you must connect at least one media source. Each media source acts as a metadata source for your programming, and optionally, the streaming source.</p> <p>Click the \"Add\" button, followed by your source. For Plex, you can choose Auto to perform automatic web authentication. Alternatively, you can select Manual, input your URL (http://serverIP:32400) and Access Token. Unless you have a specific reason for doing so, leave Auto-Update Guide and Auto-Update Channels unchecked. If communication with your server is successful, you should see a green checkmark cloud icon next to your server URL.</p> <p></p> <p>Info</p> <p>We plan on implementing other media source types, including Emby and Local Media. Upvote and follow the issues you'd like to see us implement!</p>"},{"location":"getting-started/setup/#ffmpeg","title":"FFMPEG","text":"<p>Tunarr also requires FFmpeg. FFmpeg is used to normalize channel video / audio streams for seamless playback, interleave your \"flex\" content, and more. Tunarr defaults to looking for the FFmpeg executable at <code>/usr/bin/ffmpeg</code>. If no executable is found, you can change the path in the FFmpeg settings page. The minimum known supported version of FFmpeg is 6.1. The recommended version is at least 7.0.</p> <p>Please note that FFmpeg is provided in Tunarr Docker images, so Docker users should not need to make any adjustments to this page.</p> <p></p> <p>Click \"FINISH\" and you will be brought to the new channel page to create your first channel.</p> <p></p> <pre><code>\n</code></pre>"},{"location":"misc/common-issues/","title":"Common Issues","text":""},{"location":"misc/common-issues/#missing-hardware-acceleration-options","title":"Missing Hardware Acceleration Options","text":"<p>The hardware acceleration options listed in the FFMPEG Settings page are derived from output generated by the your configured <code>ffmpeg</code> executable. The command used to discover available hardware accel. options is</p> <pre><code>ffmpeg -hide_banner -hwaccels\n</code></pre> <p>There are a few reasons why your desired hardware acceleration option is not appearing in this list. Here a few of the common ones we've seen:</p> <ol> <li>If using Docker, you are not using the appropriate image tag. For instance, if you want to use Nvidia hardware accel, you must be sure to use the <code>*-nvidia</code> labeled Tunarr builds. For iGPUs, like Intel GPUs, the <code>*-vaapi</code> Docker images are required.</li> <li>The <code>ffmpeg</code> executable used by Tunarr is not correct. Double-check the executable path configured by Tunarr with the one in your CLI environment (<code>which ffmpeg</code>). One example of this running on Ubuntu and having installed a version of ffmpeg with <code>snap</code> (executable in <code>/snap/bin/ffmpeg</code>) and one with <code>apt</code> (in <code>/usr/bin/ffmpeg</code>).</li> <li>The <code>ffmpeg</code> executable you are using does not have the necessary libraries compiled in. This can be verified with the hardware accel. command above.</li> </ol> <p>If you've double-checked these things and still are experiencing issues, please open up a new Q&amp;A discussion topic so we can debug.</p>"},{"location":"misc/common-issues/#channel-mappings-being-reset-in-plex","title":"Channel mappings being reset in Plex","text":"<p>If you notice your channel guide is blank, open Plex &gt; Settings &gt; Live TV &amp; DVR &gt; Select \"Channels (X) X enabled\". If you see something similar to the below screenshot where the dropdowns are blank, your channels have lost their mappings. </p> <p></p> <p>You can quickly resolve this by selecting the dropdown on the right and manually re-mapping your channels, but this will not resolve the underlying issue. </p> <p>Head over to Tunarr &gt; Settings &gt; SOURCES &gt; Select the pencil icon next to your server &gt; Verify Auto-Update Channels is unchecked.</p> <p></p> <p></p> <p>If this is already unchecked, see Issue #818 to track this issue. </p>"}]}
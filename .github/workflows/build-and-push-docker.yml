name: Build & Push Docker

on:
  workflow_dispatch:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  schedule:
    - cron: '0 13-21/2 * * MON-FRI' # every hour, during working hours (UTC)

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      max-parallel: 2
      matrix:
        builds:
          - base_tag: '7.0'
            tags: |
              chrisbenincasa/tunarr:edge
              ghcr.io/chrisbenincasa/tunarr:edge
              chrisbenincasa/tunarr:latest
              ghcr.io/chrisbenincasa/tunarr:latest
            platform: linux/amd64
            suffix:
          - base_tag: 7.0-nvidia
            tags: |
              chrisbenincasa/tunarr:edge-nvidia
              ghcr.io/chrisbenincasa/tunarr:edge-nvidia
            platform: linux/amd64
            suffix: -nvidia
          - base_tag: 7.0-vaapi
            tags: |
              chrisbenincasa/tunarr:edge-vaapi
              ghcr.io/chrisbenincasa/tunarr:edge-vaapi
            platform: linux/amd64
            suffix: -vaapi
          - base_tag: 7.0-arm64
            tags: |
              chrisbenincasa/tunarr:edge-arm64
              ghcr.io/chrisbenincasa/tunarr:edge-arm64
            platform: linux/arm64
            suffix: -arm64
          - base_tag: 7.0-arm
            tags: |
              chrisbenincasa/tunarr:edge-arm
              ghcr.io/chrisbenincasa/tunarr:edge-arm
            platform: linux/arm/v7
            suffix: -arm

    steps:
      - uses: actions/checkout@v4
        with:
          ref: dev

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            suffix=${{ matrix.builds.suffix }}
          images: |
            chrisbenincasa/tunarr
            ghcr.io/chrisbenincasa/tunarr
          tags: |
            type=schedule,pattern=edge
            type=semver,pattern={{version}}
            type=raw,value=edge,enable=${{github.ref == format('refs/heads/{0}', 'dev') && github.event_name == 'workflow_dispatch'}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4 # Cache previous HEAD SHA
        with:
          path: previous_head_sha
          key: ${{ runner.os }}-edge-build-${{ github.sha }}
          restore-keys: | # Check for previous SHA in cache
            ${{ runner.os }}-edge-build-

      - name: Check for HEAD commit changes
        run: |
          git fetch origin main
          HEAD_SHA=$(git rev-parse HEAD)

          if [[ -z "$PREVIOUS_HEAD_SHA" ]]; then
            echo "No previous HEAD SHA found (first run). Building image."
          elif [[ "$HEAD_SHA" != "$PREVIOUS_HEAD_SHA" ]]; then
            echo "Head commit has changed. Building and pushing image."
          else
            echo "Head commit hasn't changed. Skipping build."
            exit 0  # Exit without pushing the image
          fi
          echo "PREVIOUS_HEAD_SHA=$HEAD_SHA" >> previous_head_sha  # Save current SHA for next run
        if: github.event_name == 'schedule'

      - name: Generate Version Number
        run: |
          echo "TUNARR_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{matrix.builds.platform}}
          build-args: |
            base_image_tag=${{ matrix.builds.base_tag }}
            is_edge_build=true
            tunarr_build="${TUNARR_VERSION}"
          target: full-stack
          tags: ${{matrix.builds.tags}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
